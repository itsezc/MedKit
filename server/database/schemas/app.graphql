scalar Date

type MessageHandler {
	_id: Int
	text: String
	createdAt: Date,
	user: MessageUser
	image: String
	video: String
	system: Boolean
}

type MessageUser {
	_id: Int
	name: String
	avatar: String
}

type MessageQuickReply {
	type: String
	keepIt: Boolean
	values: [MessageQuickReplyValue]
	user: MessageUser
}

type MessageQuickReplyValue {
	title: String
	value: String
}

type Account @key (fields: "id"){
	id: ID 
	email: String
	password: String
	firstName: String
	lastName: String
	dateOfBirth: Date
	weight: Float
}

type LoginPayload {
	token: String
	user: Account
}

extend type Mutation {
	login(email: String!, password: String!): LoginPayload
	register(email: String!, password: String!): LoginPayload
}

extend type Query {
	handleMessage(index: Int, message: String): MessageHandler
	getUser(id: ID): Account
}