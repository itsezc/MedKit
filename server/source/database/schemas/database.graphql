type Account @rootEntity {
    email: String! @unique
    phone: String
    phoneExt: String
    password: String
    firstName: String
    lastName: String
    dateOfBirth: DateTime
    weight: Float
    activities: [Activity] @relation
}

type Activity @rootEntity {
	name: String
	tag: String
	time: DateTime
	account: Account @relation(inverseOf: "activities")
}

# Workouts

type Exercise @rootEntity {
	name: String!
	description: String
	image: String
	equipment: ExerciseEquipment @relation
}

type ExerciseEquipment @rootEntity {
	name: String! @unique
	image: String
	exercise: @relation(inverseOf: "equipment")
}

# Diseases
# and related properties

type Disease @rootEntity {
	name: String @unique
	symptoms: [Symptom] @relation
	treatments: [Treatment] @relation
	medication: [Medication] @relation
	questions: [Question] @relation
}

type Symptom @rootEntity {
	name: String! @unique
	description: String
	diseases: [Disease] @relation(inverseOf: "symptoms")
}

type Treatment @rootEntity {
	method: String
	diseases: [Disease] @relation(inverseOf: "treatments")
	minAge: Int
}

type Medication @rootEntity {
	name: String!
	minAge: Int
	diseases: [Disease] @relation(inverseOf: "medication")
}

type Chat @rootEntity {
	possibilities: [Disease] @relation
	user: [Account] @relation
}

type Question @rootEntity {
	question: String!
	replies: [QuickReply]
	diseases: [Disease] @relation(inverseOf: "questions")
}

type QuickReply @childEntity {
	title: String!
	value: String!
}

# Doctors & Appointments

type Doctor {
	account: Account @relation
	appointments: [Appointments] @relation
}

type Appointment {
	doctor: Doctor @relation
	time: DateTime
	account: Account @relation
}

# Healthy Reciepes 

type Reciepe @rootEntity {
	name: String!
	image: String
	ingridents: [Ingredient] @relation
}

type Ingredient @rootEntity {
	name: String! 
	image: String
}